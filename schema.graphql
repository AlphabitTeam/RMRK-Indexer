type RemarkEntity @entity {
  id: ID! #id is a required field
  value: String!
  caller: String!
  blockNumber: String!
  interaction: String
  timestamp: Date
  extra: String
  specVersion: String
  processed: Int
}

type FailedEntity @entity {
  id: ID! #id is a required field
  value: String!
  reason: String!
  interaction: String
  remark: String
  timestamp: Date
}

type CollectionEntity @entity {
  version: String
  name: String
  max: Int
  issuer: String
  symbol: String
  id: ID!
  metadata: String
  currentOwner: String
  nfts: [NFTEntity] @derivedFrom(field: "collection")
  events: [Event]
  blockNumber: BigInt @index

  timestampCreatedAt: Date
  timestampUpdatedAt: Date

  eventId: String
}

type NFTEntity @entity {
  name: String @index
  instance: String
  transferable: Int
  collection: CollectionEntity!
  issuer: String @index
  sn: String
  id: ID!
  metadata: String
  currentOwner: String
  price: BigInt
  burned: Boolean
  blockNumber: BigInt @index
  events: [Event]
  emotes: [Emote] @derivedFrom(field: "nft")

  timestampCreatedAt: Date
  timestampUpdatedAt: Date

  priority: [String]
  resources: [Resource]
  children: [NFTChild]

  eventId: String
}
type Resource @jsonField {
  pending: Boolean!
  id: String!
  src: String
  metadata: String
  base: String
  slot: String
  license: String
  thumb: String
  parts: [String]
  theme: String
}
type NFTChild @jsonField {
  id: String!
  equipped: String!
  pending: Boolean!
}

type Event @jsonField {
  blockNumber: String
  timestamp: Date
  caller: String!
  interaction: String
  meta: String!

  interactionCollection: String
  interactionNFT: String
  interactionAccount: String
  nftPrice: String
}

type EventEntity @entity {
  id: ID!
  blockNumber: String
  timestamp: Date
  caller: String!
  interaction: String
  meta: String!

  interactionCollection: String
  interactionNFT: String
  interactionAccount: String
  nftPrice: BigInt
}

type Emote @entity {
  id: ID!
  nft: NFTEntity!
  caller: String!
  value: String!
  timestamp: Date
}


